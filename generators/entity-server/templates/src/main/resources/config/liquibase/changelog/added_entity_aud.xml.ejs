<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <% let autoIncrementValue = true;
        let primaryKeyType = 'bigint';
        for (idx in relationships) {
            if (relationships[idx].useJPADerivedIdentifier === true) {
                primaryKeyType = (relationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2') ? 'varchar(100)' : primaryKeyType;
                autoIncrementValue = false;
                break;
            }
        }
        const isAutoIncrementDB = prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb';
    _%>

    <%  autoIncrementValue = primaryKeyType !== 'String';
        let databasePKType = primaryKeyType !== 'String' ? 'bigint' : 'varchar(100)';
        let entityTableNameAudit = entityTableName + '_aud';
    _%>

    <!--
        Added audit table to entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-1" author="jhipster">
        <%_ if (typeof javadoc == 'undefined') { _%>
        <createTable tableName="<%= entityTableNameAudit  %>">
        <%_ } else { _%>
        <createTable tableName="<%= entityTableNameAudit %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
        <%_ } _%>
            <column name="id" type="<%= databasePKType %>" <%_ if (primaryKeyType === 'String' ) { _%> <% } else { %><%_ } %>>
                <constraints nullable="false"/>
            </column>
            <%_ for (idx in fields) {
                let nullable = true;
                let maxlength = 255;
                if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('maxlength')) {
                    maxlength = fields[idx].fieldValidateRulesMaxlength;
                }
                const fieldType = fields[idx].fieldType;
                const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                const columnName = fields[idx].fieldNameAsDatabaseColumn;
                let columnType;
                if (fieldType === 'String' || fields[idx].fieldIsEnum) {
                    columnType="varchar(" + maxlength + ")";
                } else if (fieldType === 'Integer') {
                    columnType="integer";
                } else if (fieldType === 'Long') {
                    columnType="bigint";
                } else if (fieldType === 'Float') {
                    columnType="${floatType}";
                } else if (fieldType === 'Double') {
                    columnType="double";
                } else if (fieldType === 'BigDecimal') {
                    columnType="decimal(21,2)";
                } else if (fieldType === 'LocalDate') {
                    columnType="date";
                } else if (fieldType === 'Instant') {
                    columnType="datetime";
                } else if (fieldType === 'ZonedDateTime') {
                    columnType="datetime";
                } else if (fieldType === 'Duration') {
                    columnType="bigint";
                } else if (fieldType === 'UUID') {
                    columnType="${uuidType}";
                } else if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    if (prodDatabaseType === 'mysql' || prodDatabaseType === 'postgresql' || prodDatabaseType === 'mariadb') {
                        columnType="longblob";
                    } else {
                        columnType="blob";
                    }
                } else if (fieldTypeBlobContent === 'text') {
                    columnType="${clobType}";
                } else if (fieldType === 'Boolean') {
                    columnType="boolean";
                }
                _%>
                <%_ if (typeof fields[idx].javadoc == 'undefined') { _%>
            <column name="<%= columnName %>" type="<%= columnType %>">
                <%_ } else { _%>
            <column name="<%= columnName %>" type="<%= columnType %>" remarks="<%- formatAsLiquibaseRemarks(fields[idx].javadoc) %>">
                <%_ } _%>
                <constraints nullable="<%= nullable %>" />
            </column>
                <%_ if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    let contentTypeColumnType = columnType;
                    contentTypeColumnType = "varchar(255)"; _%>
            <column name="<%= columnName %>_content_type" type="<%= contentTypeColumnType %>">
                <constraints nullable="<%= nullable %>" />
            </column>
                <%_ }
                fields[idx].columnType = columnType;
            } _%>
            <column name="rev" type="integer">
                <constraints nullable="false"/>
            </column>
            <column name="revtype" type="integer">
                <constraints nullable="true"/>
            </column>
            <column name="revend" type="integer">
                <constraints nullable="true"/>
            </column>
            <%_ for (idx in relationships) {
                let nullable_relation = true,
                relationshipType = relationships[idx].relationshipType,
                relationshipName = relationships[idx].relationshipName,
                relationshipColumnType = relationships[idx].otherEntityPrimaryKeyType === 'String' ? 'varchar(100)' : 'bigint';
                if (relationships[idx].relationshipType === 'many-to-one') { _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="<%= nullable_relation %>" />
            </column>
            <%_ } else if (relationshipType === 'one-to-one' && relationships[idx].ownerSide === true
                            && (relationships[idx].useJPADerivedIdentifier == null || relationships[idx].useJPADerivedIdentifier === false)) {                
            _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="<%= nullable_relation %>" />
            </column>
            <%_ }
            } _%>
            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->
        </createTable>

        <addPrimaryKey tableName="<%= entityTableNameAudit  %>" columnNames="<%_ if (primaryKeyType !== 'String' ) { %>id,<%_ } %>rev" />

        <%_ for (const idx in fields) {
            if (fields[idx].fieldType === 'ZonedDateTime' || fields[idx].fieldType === 'Instant') { _%>
        <dropDefaultValue tableName="<%= entityTableNameAudit %>" columnName="<%= fields[idx].fieldNameAsDatabaseColumn %>" columnDataType="datetime"/>
        <%_ }
        } _%>
    </changeSet>

    <changeSet id="<%= changelogDate %>-1-relations" author="jhipster">
        <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType,
            relationshipName = relationships[idx].relationshipName,
            ownerSide = relationships[idx].ownerSide,
            otherEntityName = relationships[idx].otherEntityName;
            const relationshipColumnType = otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : 'bigint';
            if (relationshipType === 'many-to-many' && ownerSide) {
                const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType) + "_aud";
          _%>

        <createTable tableName="<%= joinTableName %>">
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="false"/>
            </column>
            <column name="<%= getColumnName(name) %>_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="rev" type="integer">
                <constraints nullable="false"/>
            </column>
            <column name="revtype" type="integer">
                <constraints nullable="true"/>
            </column>
            <column name="revend" type="integer">
                <constraints nullable="true"/>
            </column>            
        </createTable>
        
        <addPrimaryKey tableName="<%= joinTableName %>" columnNames="<%= getColumnName(name) %>_id, <%= getColumnName(relationshipName) %>_id,rev"/>
        <% } %><% } %>
    </changeSet>
    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->
</databaseChangeLog>
